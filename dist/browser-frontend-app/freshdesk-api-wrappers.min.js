const freshdeskApiKit=function(){const{set:t,get:e}=WeakMap.prototype,s=new WeakMap;return class{constructor(e,r,o=!1){this.domainName=e,this.url=`https://${e}/api/v2/`,this.logging=o,t.call(s,this,{headers:{Authorization:`Basic ${r}`,"Content-Type":"application/json"}})}consoleDevLog(...t){this.logging&&console.log(...t)}getTicket(t,e={}){const s=`${this.url}tickets/${t}`;return this.requestOperator("Get Ticket","GET",200,s,e)}createTicket(t,e={}){const s=`${this.url}tickets/`;return this.requestOperator("Create Ticket","POST",201,s,e,t)}updateTicket(t,e={},s={}){const r=`${this.url}tickets/${t}`;return this.requestOperator("Update Ticket","PUT",200,r,s,e)}deleteTicket(t,e={}){const s=`${this.url}tickets/${t}`;return this.requestOperator("Delete Ticket","DELETE",204,s,e)}searchTickets(t,e={}){const s=`${this.url}search/tickets?query="${t}"`;return this.requestOperator("Get Ticket","GET",200,s,e)}createNoteToTicket(t,e={},s={}){const r=`${this.url}tickets/${t}/notes`;return this.requestOperator("Create Note To Ticket","POST",201,r,s,e)}createReplyToTicket(t,e={},s={}){const r=`${this.url}tickets/${t}/reply`;return this.requestOperator("Create Note To Ticket","POST",201,r,s,e)}createTopicToForum(t,e={},s={}){const r=`${this.url}discussions/forums/${t}/topics`;return this.requestOperator("Create Topic To Forum","POST",201,r,s,e)}requestOperator(t,r,o,i,n,c){const u=Object.assign(e.call(s,this).headers,n);return this.consoleDevLog(`Trying to ${t} with request: ${i}`),this.makeRequest(r,i,u,c).then(e=>(e.status===o?this.consoleDevLog(`${t} successfully done. Status: ${e.status}`):this.consoleDevLog(`Not final response code returned (${e.status}) during ${t}`,e.headers),e),e=>(this.consoleDevLog(`Error during ${t} promise. `,e),e))}makeRequest(t,e,s,r){(r=r||null)&&"object"==typeof r&&(r=JSON.stringify(r));const o=function(t,e,s,r){return{status:t,headers:s,response:r}},i=function(t){const e={};return t.getAllResponseHeaders().split("\n").forEach(t=>{const s=t.split(": ");s[1]&&(e[s[0]]=s[1])}),e};return new Promise(function(n,c){const u=new XMLHttpRequest;u.open(t,e),s&&Object.keys(s).forEach(function(t){u.setRequestHeader(t,s[t])}),u.onload=function(){const t=o(this.status,u.statusText,i(u),u.response);this.status>=200&&this.status<300?n(t):c(t)},u.onerror=function(){c(o(this.status,u.statusText,i(u),u.response))},u.ontimeout=function(){c(o(this.status,u.statusText,i(u),u.response))},u.send(r)})}}}();